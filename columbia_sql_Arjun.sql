CREATE TABLE hospital (
	date DATETIME,	
    patient_id VARCHAR(50),
    patient_gender VARCHAR(5),
    patient_age	INT,
    patient_sat_score INT,
    patient_first_inital VARCHAR(100),
    patient_last_name VARCHAR(100),
    patient_race VARCHAR(100),
    patient_admin_flag VARCHAR(10),
    patient_waittime INT, 
    department_referral VARCHAR(100)
);

CREATE TABLE doctor_patients (
	patient_id VARCHAR(100),
    department_referral	VARCHAR(100),
    doctor_name VARCHAR(100),
	appointment_fees INT,
	total_bill INT,
    doctor_id VARCHAR(100)
);

SELECT * FROM doctor_patients ORDER BY patient_id LIMIT 9216;
-- patient_id, department_referral, doctor_name, appointment_fees, total_bill, doctor_id

SELECT * FROM hospital ORDER BY patient_id LIMIT 10000;
-- date, patient_id, patient_gender, patient_age, patient_sat_score, patient_first_inital, patient_last_name, patient_race, patient_admin_flag, patient_waittime, department_referral

-- -------------------------------------------------------------------------------------------------------------------------------------------

/* 15.	Identify the top 5 doctors who generated the most revenue but had the fewest patients. (SQL) */

SELECT
	d.doctor_id,
	d.doctor_name,
	SUM(d.total_bill) AS total_revenue,
	COUNT(d.patient_id) AS patient_count
FROM doctor_patients d
JOIN hospital h ON d.patient_id = h.patient_id
GROUP BY d.doctor_id,d.doctor_name
ORDER BY total_revenue DESC, patient_count ASC LIMIT 5;

-- ---------------------------------------------------------------------------------------------------------------------------------

/* 16.	Find the department where the average waiting time has decreased over three consecutive months. (SQL) */

WITH MonthlyAvgWaitTime AS (
	SELECT 
		h.department_referral,
        DATE_FORMAT(h.date,"%Y-%m") AS month_name,
        AVG(h.patient_waittime) AS avg_waittime
	FROM hospital h
	GROUP BY 1,2
),

WaitTimeTrend AS (
	SELECT 
		m1.department_referral,
        m1.month_name AS current_month,
        m1.avg_waittime AS current_waittime,
        m2.avg_waittime AS prev_waittime,
        m3.avg_waittime AS two_months_ago_waittime
    FROM MonthlyAvgWaitTime m1
    LEFT JOIN MonthlyAvgWaitTime m2 ON m1.department_referral = m2.department_referral 
    AND DATE_ADD(m2.month_name, INTERVAL 1 MONTH) = m1.month_name
	LEFT JOIN MonthlyAvgWaitTime m3 ON m1.department_referral = m3.department_referral 
    AND DATE_ADD(m3.month_name, INTERVAL 2 MONTH) = m1.month_name
)

SELECT 
	department_referral
FROM WaitTimeTrend
WHERE current_waittime < prev_waittime 
AND prev_waittime < two_months_ago_waittime
GROUP BY department_referral;

-- ---------------------------------------------------------------------------------------------------------------------------------

/* 17.	Determine the ratio of male to female patients for each doctor and rank the doctors based on this ratio. (SQL)*/

WITH PatientCount AS (
	SELECT 
		h.department_referral,
		SUM(CASE WHEN h.patient_gender = 'M' THEN 1 ELSE 0 END) AS male_patients,
		SUM(CASE WHEN h.patient_gender = 'F' THEN 1 ELSE 0 END) AS female_patients
	FROM hospital h 
	GROUP BY 1
),

DoctorRank AS (
	SELECT 
		department_referral,male_patients,female_patients,
		ROUND(male_patients / female_patients,2) AS ratio,
		RANK() OVER(ORDER BY male_patients / female_patients DESC) AS doc_rank
	FROM PatientCount
)

SELECT 
	department_referral,
    male_patients,
    female_patients,
    ratio
FROM DoctorRank
ORDER BY doc_rank ASC;
 
-- ---------------------------------------------------------------------------------------------------------------------------------

/* 18.	Calculate the average satisfaction score of patients for each doctor based on their visits. (SQL) */

WITH AvgSatScore AS (
	SELECT 
		d.doctor_id,
		d.doctor_name,
        AVG(h.patient_sat_score) AS avg_sat_score
    FROM doctor_patients d
	LEFT JOIN hospital h ON d.patient_id = h.patient_id 
    GROUP BY 1,2
)

SELECT 
	doctor_name,
    ROUND(avg_sat_score,2) AS avg_sat_score
FROM AvgSatScore
ORDER BY avg_sat_score DESC;

-- ---------------------------------------------------------------------------------------------------------------------------------

/*  19.	Find doctors who have treated patients from different races and calculate the diversity of their patient base. (SQL) */

WITH DiverseRaceCount AS (
	SELECT 
		d.doctor_name,
		COUNT(DISTINCT h.patient_race) AS race_count
    FROM doctor_patients d
	LEFT JOIN hospital h ON d.patient_id = h.patient_id 
    GROUP BY 1
)

SELECT * 
FROM DiverseRaceCount
ORDER BY race_count DESC;

-- ---------------------------------------------------------------------------------------------------------------------------------

/* 20.	Calculate the ratio of total bills generated by male patients to female patients for each department. (SQL) */

WITH GenderBillSum AS (
	SELECT 
		h.department_referral, h.patient_gender,
        SUM(COALESCE(d.total_bill,0)) AS total_bill
	FROM doctor_patients d 
    JOIN hospital h on d.patient_id = h.patient_id
    WHERE h.patient_gender IN ('M','F')
    GROUP BY 1,2
),

DepartmentRatios AS (
	SELECT 
		gb1.department_referral, COALESCE(gb1.total_bill,0) AS male_total_bill, COALESCE(gb2.total_bill,0) AS female_total_bill,
        CASE 
			WHEN COALESCE(gb2.total_bill,0) = 0 THEN NULL 
            ELSE COALESCE(gb1.total_bill,0) / COALESCE(gb2.total_bill,0)
		END AS male_to_female_ratio
    FROM (SELECT * FROM GenderBillSum WHERE patient_gender = 'M') gb1
    JOIN (SELECT * FROM GenderBillSum WHERE patient_gender = 'F') gb2
	ON gb1.department_referral = gb2.department_referral
)

SELECT 
	department_referral, 
    male_total_bill, 
    female_total_bill, 
    ROUND(male_to_female_ratio,2) AS male_to_female_ratio 
FROM DepartmentRatios;

-- ---------------------------------------------------------------------------------------------------------------------------------

/* 21.	Update the patient satisfaction score for all patients who visited the "General Practice" department and had a waiting time of more than 30 minutes. Increase their satisfaction score by 2 points, but ensure that the satisfaction score does not exceed 10. (SQL) */


UPDATE hospital 
SET patient_sat_score = 
     CASE 
           WHEN patient_sat_score + 2 > 10 THEN 10
           ELSE patient_sat_score + 2
     END
WHERE patient_waittime > 30
AND department_referral = "General Practice";


-- ---------------------------------------------------------------------------------------------------------------------------------
